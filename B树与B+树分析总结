# 索引的原理总结
 
## 索引与二叉树
 
 索引的使用在很大程度上提高了查询速度，但是，索引存放于磁盘中，每次查询都会产生I/O，而当磁盘的输入输出操作增加，查询数据所需时间也会相应增加。
 为此，人们发现一种二分查找的方法。在二叉树中，左子树的值小于结点的值小于右子树的值，因此待查找值的取值会有三种范围可取。
 但是二叉树深度越大查询时间越长，而且二分搜索树并不是都是满二叉树，如果二叉树呈现单链条形式，那么与同深度的满二叉树相比，
 查找范围减少，但是对比次数并未减少，因此二分搜索树在某些情况下，查询速度不一定很快。另一方面即使是满二叉树查询次数也会达到Log2n,也是比较大的。
 ## B树
 与二叉树的区别在于，B树一个节点下面可以有M个子节点，因为B树的这种特性，使得它的高度远小于平衡二叉树的高度。
  ⼀个 M 阶的 B 树（M>2）有以下的特性： 
  1.根节点的⼉⼦数的范围是[2,M]。
  2.每个中间节点包含 k-1 个关键字和 k 个孩⼦，孩⼦的数量 = 关键字的数量+1，k 的取值范围为 [ceil(M/2), M].
  3.叶⼦节点包括 k-1 个关键字（叶⼦节点没有孩⼦），k 的取值范围为 [ceil(M/2), M].
  4.假设中间节点节点的关键字为：Key[1], Key[2], …, Key[k-1]，且关键字按照升序 排序，即 Key[i]<Key[i+1]。此时 k-1 个关键字相当于划分了 k 个范围，
  也就是对应着 k 个指针，即为：P[1], P[2], …, P[k]，其中 P[1]指向关键字⼩于 Key[1] 的 ⼦树，P[i] 指向关键字属于 (Key[i-1], Key[i]) 的⼦树，P[k] 指向关键字⼤于 Key[k-1] 的⼦树。
  5.所有叶⼦节点位于同⼀层。 
  
  B树的查找是根据节点内的值来划分范围的，以3阶B树为例，若关键字我、有两个，则其孩子有三个，三个孩子中也会分别有两个关键字，而孩子的关键字的取值是根据父结点分的，
  取值范围为小于父结点最小关键字，范围在父结点关键字范围内，范围在大于父结点最大关键字。
  根据这样的特点，待查取的值就可以与之相比找到属于自己的范围，最终找到对应值。
  
 ## B+树
 B+树和 B 树的差异在于以下⼏点： 
 1.有 k 个孩⼦的节点就有 k 个关键字。也就是孩⼦数量 = 关键字数，⽽ B 树中， 孩⼦数量 = 关键字数+1。 
 2.⾮叶⼦节点的关键字也会同时存在在⼦节点中，并且是在⼦节点中所有关键字的 最⼤（或最⼩）。
 3. ⾮叶⼦节点仅⽤于索引，不保存数据记录，跟记录有关的信息都放在叶⼦节点中。⽽ B 树中，⾮叶⼦节点既保存索引，也保存数据记录。
 4.所有关键字都在叶⼦节点出现，叶⼦节点构成⼀个有序链表，⽽且叶⼦节点本⾝ 按照关键字的⼤⼩从⼩到⼤顺序链接。
 B+树中的根结点因为有以上特点，所以查询速度比B树更快。
 此外，由于非叶子节点中只包含索引，所以查询效率更稳定，因为B树中节点也包含数据，所以有的数据可能在父结点中，查询深度就会少一些，进而查询速度会快，
 但是如果待查询的数在叶子中，就需要走遍所有深度，查询速度相对慢一些。
 又因为，B+树深度较B树少，且每层存储量大于B树，所以查询所需I/O次数较少，进而B+树比B树更加优异。
 
