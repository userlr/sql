# 索引的使用概述
索引：
 数据库中的索引，就好⽐⼀本书的⽬录，它可以帮我们快速进⾏特定值的定位与查找，从⽽加快数据查询的效率。索引就是帮助数据库管理系统⾼效获取数据的数据结构。 
 如果我们不使⽤索引，就必须从第 1 条记录开始扫描，直到把所有的数据表都扫描完，才能找到想要的数据。
 简而言之，索引是为了提高查询速度而存在的。
## 索引在什么情况下使用比较合适
 数据比较多的时候，使用索引能明显提高查询速度。但是毕竟索引也是需要检索的，所以如果数据量较少，使用索引的查询速度并不快。
 在数据量多的时候并不代表使用索引一定会加快查询速度，有可能会降低查询速度。因为系统查询索引+查询数据的次数与直接进行数据查找的次数相近，那么就不需要使用索引。
 毕竟索引的存在还是会占去系统内存的。比如100万行数据中（男女比例接近1:1），查找性别为男的人，此时，索引检索的次数基本达到50万次，而且还要再进行50万次的数据查找，所以
 这样加起来的次数可能比不加索引的次数还要多。所以要根据情况使用索引。一般在数据量较大，而待查找量较小的时候，使用索引的查询速度会比较快。
 
 
## 索引的总类
 ### 逻辑功能上进行区分
 1.普通索引
 普通索引是基础的索引，没有任何约束，主要⽤于提⾼查询效率，加快对数据的访问速度。
 
 2.唯⼀索引
 唯⼀索引就是在普通索引的基础上增加了数据唯⼀性的约束，即索引列的值必须唯一，允许存在空值。在⼀张数据表⾥可以有多个唯⼀索引。
 
 3.主键索引
 主键索引在唯⼀索引的基础上增加了不为空的约束，也就是NOT NULLUNIQUE，⼀张表⾥最多只有⼀个主键索引。
 
 4.全⽂索引
 全⽂索引⽤的不多，MySQL ⾃带的全⽂索引只⽀ 持英⽂。我们通常可以采⽤专⻔的全⽂搜索引擎。
 
 ### 按照物理实现方式划分
 1.聚集索引
 聚集索引可以按照主键来排序存储数据，这样在查找⾏的时候⾮常有效。
 举个例⼦，如果是⼀本汉语字典，我们 想要查找“数”这个字，直接在书中找汉语拼⾳的位置即可，也就是拼⾳“shu”。这样找到了索引的位置，在它后⾯ 就是我们想要找的数据⾏。
即聚集索引直接对应数据，所以找到索引，就能直接找到数据。聚集索引指表中数据⾏按索引的排序⽅式进⾏存储，对查找⾏很有效。
只有当表包含聚集索引时，表内的数据⾏才会按找索引列的值在磁盘上进⾏物理排序和存储。每⼀个表只能有⼀个聚集索引，因为数据⾏本⾝只能按⼀个 顺序存储。

 2.非聚集索引（二级索引，辅助索引）
 在数据库系统会有单独的存储空间存放⾮聚集索引，这些索引项是按照顺序存储的，但索引项指向的内容是随机 存储的。
 也就是说系统会进⾏两次查找，第⼀次先找到索引，第⼆次找到索引对应的位置取出数据⾏。
 ⾮聚集索引不会把索引指向的内容像聚集索引⼀样直接放到索引的后⾯，⽽是维护单独的索引表（只维护索引，不维护索引指向的数据），为数据检索提供⽅便。
 我们还以汉语字典为例，如果想要查找“数”字，那么按照部⾸查找的⽅ 式，先找到“数”字的偏旁部⾸，然后这个⽬录会告诉我们“数”字存放到第多少⻚，我们再去指定的⻚码找这个字。
 即非聚集索引存储的相当于是数据的地址，只有先找到数据的地址才能准确找到数据。
 
 
 
 聚集索引与⾮聚集索引的原理不同，在使⽤上也有⼀些区别： 
 聚集索引的叶⼦节点存储的就是我们的数据记录，⾮聚集索引的叶⼦节点存储的是数据位置（类似于地址）。⾮聚集索引不会影响数据表的物理存储顺序。 
  ⼀个表只能有⼀个聚集索引，因为只能有⼀种排序存储的⽅式，但可以有多个⾮聚集索引，也就是多个索引 ⽬录提供数据检索。
  使⽤聚集索引的时候，数据的查询效率⾼，但如果对数据进⾏插⼊，删除，更新等操作，效率会⽐⾮聚集索引低。
  
### 按照字段个数进行划分
 1.单一索引
 索引列为一列
 
 2.联合索引
 多个列组合在一起，类似于数学中的x,y,z轴，索引越多，约束条件就越多，就越容易锁定目标值。
 联合索引有一个最左匹配原则，简单来说就是x,y,z,谁的排名越靠左，就先启用谁的约束条件。
 

 尽管索引的使用会占用部分存储空间，降低数据库的写操作等等，但是在进行大数据运算的时候，数量太多，使用索引的速度几乎能达到不使用索引的10倍。
 所以牺牲部分存储换取时间复杂度的减少是值得的，但是索引的建立是在一定的条件基础上的，正确创建索引才能真正提高速度。

 
